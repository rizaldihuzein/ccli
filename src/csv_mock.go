// Code generated by MockGen. DO NOT EDIT.
// Source: csv.go

// Package src is a generated GoMock package.
package src

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcsvWriterIface is a mock of csvWriterIface interface.
type MockcsvWriterIface struct {
	ctrl     *gomock.Controller
	recorder *MockcsvWriterIfaceMockRecorder
}

// MockcsvWriterIfaceMockRecorder is the mock recorder for MockcsvWriterIface.
type MockcsvWriterIfaceMockRecorder struct {
	mock *MockcsvWriterIface
}

// NewMockcsvWriterIface creates a new mock instance.
func NewMockcsvWriterIface(ctrl *gomock.Controller) *MockcsvWriterIface {
	mock := &MockcsvWriterIface{ctrl: ctrl}
	mock.recorder = &MockcsvWriterIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcsvWriterIface) EXPECT() *MockcsvWriterIfaceMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockcsvWriterIface) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockcsvWriterIfaceMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockcsvWriterIface)(nil).Flush))
}

// Write mocks base method.
func (m *MockcsvWriterIface) Write(record []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockcsvWriterIfaceMockRecorder) Write(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockcsvWriterIface)(nil).Write), record)
}

// MockcsvReaderIface is a mock of csvReaderIface interface.
type MockcsvReaderIface struct {
	ctrl     *gomock.Controller
	recorder *MockcsvReaderIfaceMockRecorder
}

// MockcsvReaderIfaceMockRecorder is the mock recorder for MockcsvReaderIface.
type MockcsvReaderIfaceMockRecorder struct {
	mock *MockcsvReaderIface
}

// NewMockcsvReaderIface creates a new mock instance.
func NewMockcsvReaderIface(ctrl *gomock.Controller) *MockcsvReaderIface {
	mock := &MockcsvReaderIface{ctrl: ctrl}
	mock.recorder = &MockcsvReaderIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcsvReaderIface) EXPECT() *MockcsvReaderIfaceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockcsvReaderIface) Read() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockcsvReaderIfaceMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockcsvReaderIface)(nil).Read))
}

// MockcsvHandlerIface is a mock of csvHandlerIface interface.
type MockcsvHandlerIface struct {
	ctrl     *gomock.Controller
	recorder *MockcsvHandlerIfaceMockRecorder
}

// MockcsvHandlerIfaceMockRecorder is the mock recorder for MockcsvHandlerIface.
type MockcsvHandlerIfaceMockRecorder struct {
	mock *MockcsvHandlerIface
}

// NewMockcsvHandlerIface creates a new mock instance.
func NewMockcsvHandlerIface(ctrl *gomock.Controller) *MockcsvHandlerIface {
	mock := &MockcsvHandlerIface{ctrl: ctrl}
	mock.recorder = &MockcsvHandlerIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcsvHandlerIface) EXPECT() *MockcsvHandlerIfaceMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockcsvHandlerIface) NewReader(r io.Reader) csvReaderIface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(csvReaderIface)
	return ret0
}

// NewReader indicates an expected call of NewReader.
func (mr *MockcsvHandlerIfaceMockRecorder) NewReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockcsvHandlerIface)(nil).NewReader), r)
}

// NewWriter mocks base method.
func (m *MockcsvHandlerIface) NewWriter(w io.Writer) csvWriterIface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", w)
	ret0, _ := ret[0].(csvWriterIface)
	return ret0
}

// NewWriter indicates an expected call of NewWriter.
func (mr *MockcsvHandlerIfaceMockRecorder) NewWriter(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockcsvHandlerIface)(nil).NewWriter), w)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: process.go

// Package src is a generated GoMock package.
package src

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockusecaseIface is a mock of usecaseIface interface.
type MockusecaseIface struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseIfaceMockRecorder
}

// MockusecaseIfaceMockRecorder is the mock recorder for MockusecaseIface.
type MockusecaseIfaceMockRecorder struct {
	mock *MockusecaseIface
}

// NewMockusecaseIface creates a new mock instance.
func NewMockusecaseIface(ctrl *gomock.Controller) *MockusecaseIface {
	mock := &MockusecaseIface{ctrl: ctrl}
	mock.recorder = &MockusecaseIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusecaseIface) EXPECT() *MockusecaseIfaceMockRecorder {
	return m.recorder
}

// GetSampleAPIResourceRedirect mocks base method.
func (m *MockusecaseIface) GetSampleAPIResourceRedirect(ctx context.Context, link []string) ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampleAPIResourceRedirect", ctx, link)
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampleAPIResourceRedirect indicates an expected call of GetSampleAPIResourceRedirect.
func (mr *MockusecaseIfaceMockRecorder) GetSampleAPIResourceRedirect(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampleAPIResourceRedirect", reflect.TypeOf((*MockusecaseIface)(nil).GetSampleAPIResourceRedirect), ctx, link)
}

// SearchUserWithTags mocks base method.
func (m *MockusecaseIface) SearchUserWithTags(ctx context.Context, tags []string, path string) ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserWithTags", ctx, tags, path)
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserWithTags indicates an expected call of SearchUserWithTags.
func (mr *MockusecaseIfaceMockRecorder) SearchUserWithTags(ctx, tags, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserWithTags", reflect.TypeOf((*MockusecaseIface)(nil).SearchUserWithTags), ctx, tags, path)
}

// StoreAndReplaceUserDataToCSV mocks base method.
func (m *MockusecaseIface) StoreAndReplaceUserDataToCSV(ctx context.Context, data []UserData, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAndReplaceUserDataToCSV", ctx, data, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAndReplaceUserDataToCSV indicates an expected call of StoreAndReplaceUserDataToCSV.
func (mr *MockusecaseIfaceMockRecorder) StoreAndReplaceUserDataToCSV(ctx, data, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndReplaceUserDataToCSV", reflect.TypeOf((*MockusecaseIface)(nil).StoreAndReplaceUserDataToCSV), ctx, data, path)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package src is a generated GoMock package.
package src

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstorageIface is a mock of storageIface interface.
type MockstorageIface struct {
	ctrl     *gomock.Controller
	recorder *MockstorageIfaceMockRecorder
}

// MockstorageIfaceMockRecorder is the mock recorder for MockstorageIface.
type MockstorageIfaceMockRecorder struct {
	mock *MockstorageIface
}

// NewMockstorageIface creates a new mock instance.
func NewMockstorageIface(ctrl *gomock.Controller) *MockstorageIface {
	mock := &MockstorageIface{ctrl: ctrl}
	mock.recorder = &MockstorageIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageIface) EXPECT() *MockstorageIfaceMockRecorder {
	return m.recorder
}

// searchFromCSV mocks base method.
func (m *MockstorageIface) searchFromCSV(ctx context.Context, tags []string, path string) ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "searchFromCSV", ctx, tags, path)
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// searchFromCSV indicates an expected call of searchFromCSV.
func (mr *MockstorageIfaceMockRecorder) searchFromCSV(ctx, tags, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "searchFromCSV", reflect.TypeOf((*MockstorageIface)(nil).searchFromCSV), ctx, tags, path)
}

// storeAndReplaceUserDataToCSV mocks base method.
func (m *MockstorageIface) storeAndReplaceUserDataToCSV(ctx context.Context, data []UserData, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "storeAndReplaceUserDataToCSV", ctx, data, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// storeAndReplaceUserDataToCSV indicates an expected call of storeAndReplaceUserDataToCSV.
func (mr *MockstorageIfaceMockRecorder) storeAndReplaceUserDataToCSV(ctx, data, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "storeAndReplaceUserDataToCSV", reflect.TypeOf((*MockstorageIface)(nil).storeAndReplaceUserDataToCSV), ctx, data, path)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: fetch.go

// Package src is a generated GoMock package.
package src

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockapiFetcherIface is a mock of apiFetcherIface interface.
type MockapiFetcherIface struct {
	ctrl     *gomock.Controller
	recorder *MockapiFetcherIfaceMockRecorder
}

// MockapiFetcherIfaceMockRecorder is the mock recorder for MockapiFetcherIface.
type MockapiFetcherIfaceMockRecorder struct {
	mock *MockapiFetcherIface
}

// NewMockapiFetcherIface creates a new mock instance.
func NewMockapiFetcherIface(ctrl *gomock.Controller) *MockapiFetcherIface {
	mock := &MockapiFetcherIface{ctrl: ctrl}
	mock.recorder = &MockapiFetcherIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiFetcherIface) EXPECT() *MockapiFetcherIfaceMockRecorder {
	return m.recorder
}

// getSampleAPIResourceRedirect mocks base method.
func (m *MockapiFetcherIface) getSampleAPIResourceRedirect(ctx context.Context, link []string) ([]UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSampleAPIResourceRedirect", ctx, link)
	ret0, _ := ret[0].([]UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSampleAPIResourceRedirect indicates an expected call of getSampleAPIResourceRedirect.
func (mr *MockapiFetcherIfaceMockRecorder) getSampleAPIResourceRedirect(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSampleAPIResourceRedirect", reflect.TypeOf((*MockapiFetcherIface)(nil).getSampleAPIResourceRedirect), ctx, link)
}

// MockhttpIface is a mock of httpIface interface.
type MockhttpIface struct {
	ctrl     *gomock.Controller
	recorder *MockhttpIfaceMockRecorder
}

// MockhttpIfaceMockRecorder is the mock recorder for MockhttpIface.
type MockhttpIfaceMockRecorder struct {
	mock *MockhttpIface
}

// NewMockhttpIface creates a new mock instance.
func NewMockhttpIface(ctrl *gomock.Controller) *MockhttpIface {
	mock := &MockhttpIface{ctrl: ctrl}
	mock.recorder = &MockhttpIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpIface) EXPECT() *MockhttpIfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockhttpIface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockhttpIfaceMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockhttpIface)(nil).Do), req)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package src is a generated GoMock package.
package src

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfReaderIface is a mock of fReaderIface interface.
type MockfReaderIface struct {
	ctrl     *gomock.Controller
	recorder *MockfReaderIfaceMockRecorder
}

// MockfReaderIfaceMockRecorder is the mock recorder for MockfReaderIface.
type MockfReaderIfaceMockRecorder struct {
	mock *MockfReaderIface
}

// NewMockfReaderIface creates a new mock instance.
func NewMockfReaderIface(ctrl *gomock.Controller) *MockfReaderIface {
	mock := &MockfReaderIface{ctrl: ctrl}
	mock.recorder = &MockfReaderIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfReaderIface) EXPECT() *MockfReaderIfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockfReaderIface) Create(name string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockfReaderIfaceMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockfReaderIface)(nil).Create), name)
}

// Open mocks base method.
func (m *MockfReaderIface) Open(name string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockfReaderIfaceMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockfReaderIface)(nil).Open), name)
}
